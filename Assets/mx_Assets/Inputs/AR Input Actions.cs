//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/mx_Assets/Inputs/AR Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ARInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ARInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AR Input Actions"",
    ""maps"": [
        {
            ""name"": ""ARTouchActions"",
            ""id"": ""2722b26f-cd86-409f-934c-344bc002a82f"",
            ""actions"": [
                {
                    ""name"": ""PlaceObject"",
                    ""type"": ""Value"",
                    ""id"": ""bda76e8f-3bf5-4824-822f-c708c77771c1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b014cbbd-728a-4d00-8cc2-86563829652e"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ARTouchActions
        m_ARTouchActions = asset.FindActionMap("ARTouchActions", throwIfNotFound: true);
        m_ARTouchActions_PlaceObject = m_ARTouchActions.FindAction("PlaceObject", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ARTouchActions
    private readonly InputActionMap m_ARTouchActions;
    private IARTouchActionsActions m_ARTouchActionsActionsCallbackInterface;
    private readonly InputAction m_ARTouchActions_PlaceObject;
    public struct ARTouchActionsActions
    {
        private @ARInputActions m_Wrapper;
        public ARTouchActionsActions(@ARInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceObject => m_Wrapper.m_ARTouchActions_PlaceObject;
        public InputActionMap Get() { return m_Wrapper.m_ARTouchActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ARTouchActionsActions set) { return set.Get(); }
        public void SetCallbacks(IARTouchActionsActions instance)
        {
            if (m_Wrapper.m_ARTouchActionsActionsCallbackInterface != null)
            {
                @PlaceObject.started -= m_Wrapper.m_ARTouchActionsActionsCallbackInterface.OnPlaceObject;
                @PlaceObject.performed -= m_Wrapper.m_ARTouchActionsActionsCallbackInterface.OnPlaceObject;
                @PlaceObject.canceled -= m_Wrapper.m_ARTouchActionsActionsCallbackInterface.OnPlaceObject;
            }
            m_Wrapper.m_ARTouchActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlaceObject.started += instance.OnPlaceObject;
                @PlaceObject.performed += instance.OnPlaceObject;
                @PlaceObject.canceled += instance.OnPlaceObject;
            }
        }
    }
    public ARTouchActionsActions @ARTouchActions => new ARTouchActionsActions(this);
    public interface IARTouchActionsActions
    {
        void OnPlaceObject(InputAction.CallbackContext context);
    }
}
